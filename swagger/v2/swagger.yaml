---
openapi: 3.0.3
info:
  title: API Placeholder V2
  version: v2
paths:
  "/api/v2/blogs":
    post:
      summary: Creates a blog
      tags:
      - Blogs
      parameters: []
      responses:
        '201':
          description: Blog created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Blog"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                blog[title]:
                  type: string
                  example: My Blog
                  description: Title of the blog
                blog[content]:
                  type: string
                  example: My Blog Content
                  description: Content of the blog
                blog[image]:
                  type: string
                  format: binary
                  description: Image of the blog
              required:
              - blog[title]
              - blog[content]
    get:
      summary: Retrieves blogs as a list
      tags:
      - Blogs
      parameters:
      - name: page
        in: query
        description: Page number. Default is `1`
        required: false
        schema:
          type: number
      - name: offset
        in: query
        description: Number of items per page. Default is `20`
        required: false
        schema:
          type: number
      - name: search
        in: query
        description: Search title or content containing the query
        required: false
        schema:
          type: string
      - name: sort_by
        in: query
        description: Valid value is one of `[id, title, content, created_at, updated_at]`.
          Default is `created_at`
        required: false
        schema:
          type: string
      - name: sort_direction
        in: query
        description: Valid value is `asc` or `desc`. Default is `desc`
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Blog found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            email:
                              type: string
                            name:
                              type: string
                            avatar:
                              type: object
                              properties:
                                url:
                                  type: string
                              required:
                              - url
                            created_at:
                              type: string
                            updated_at:
                              type: string
                          required:
                          - email
                          - name
                          - avatar
                          - created_at
                          - updated_at
                      pagination:
                        type: object
                        properties:
                          count:
                            type: number
                            description: Total number of items
                          page:
                            type: number
                            description: Current page
                          offset:
                            type: number
                            description: Items per page
                          total:
                            type: number
                            description: Total number of pages
                          prev:
                            type: number
                            description: Previous page
                          next:
                            type: number
                            description: Next page
                        required:
                        - count
                        - page
                        - offset
                        - total
                        - prev
                        - next
                    required:
                    - items
                    - pagination
                required:
                - data
  "/api/v2/blogs/{id}":
    get:
      summary: Retrieves a blog by id
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Blog found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                    example: My Blog
                    description: Title of the blog
                  content:
                    type: string
                    example: My Blog Content
                    description: Content of the blog
                  image:
                    type: object
                    properties:
                      url:
                        type: string
                        example: http://localhost:3000/images/fallback/default.png
                        description: Image of the blog
                  created_at:
                    type: string
                    example: '2019-01-01T00:00:00.000Z'
                    description: Created at of the blog
                  updated_at:
                    type: string
                    example: '2019-01-01T00:00:00.000Z'
                    description: Updated at of the blog
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    put:
      summary: Update a blog
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Blog updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Blog"
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: Unprocessable request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                blog[title]:
                  type: string
                  example: My Blog
                  description: Title of the blog
                blog[content]:
                  type: string
                  example: My Blog Content
                  description: Content of the blog
                blog[image]:
                  type: string
                  format: binary
                  description: Image of the blog
              required:
              - blog[title]
              - blog[content]
    delete:
      summary: Delete a blog
      tags:
      - Blogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Blog deleted
  "/api/v2/blogs/{blog_id}/comments":
    post:
      summary: Creates a comment
      tags:
      - Comments
      security:
      - Authorization: []
      parameters:
      - name: blog_id
        in: path
        required: true
        schema:
          type: number
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Comment"
                required:
                - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment[content]:
                  type: string
                  example: This is an awesome blog
                  description: Maximun length is 5000 characters
              required:
              - comment[content]
    get:
      summary: Retrieves comments as a list
      tags:
      - Comments
      parameters:
      - name: blog_id
        in: path
        required: true
        schema:
          type: number
      - name: cursor_id
        in: query
        required: false
        description: The ID of the last comment
        schema:
          type: number
      - name: sort_direction
        in: query
        required: false
        description: Valid value is `asc` or `desc`. Default is `desc`
        schema:
          type: string
      - name: offset
        in: query
        required: false
        description: Number of items per page. Default is `20`
        schema:
          type: number
      responses:
        '200':
          description: Comments found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          "$ref": "#/components/schemas/Comment"
                    required:
                    - items
                  pagination:
                    type: object
                required:
                - data
                - pagination
  "/api/v2/comments/{id}":
    get:
      summary: Retrieves a comment by id
      tags:
      - Comments
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Comment found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Comment"
                required:
                - data
    put:
      summary: Update a comment
      tags:
      - Comments
      security:
      - Authorization: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Blog updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Comment"
                required:
                - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment[content]:
                  type: string
                  example: This is new content for the comment
                  description: Maximun length is 5000 characters
              required:
              - comment[content]
    delete:
      summary: Delete a comment
      tags:
      - Comments
      security:
      - Authorization: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Blog deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '403':
          description: Forbidden
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v2/login":
    post:
      summary: Login
      tags:
      - Auhorization
      parameters: []
      responses:
        '200':
          description: Logged in successfully with the refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
                    required:
                    - token
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@simple.me
                  description: Email of the user
                password:
                  type: string
                  example: password
                  description: Password of the user
                remember_me:
                  type: boolean
                  example: true
                  description: Remember me to get the refresh token
              required:
              - email
              - password
  "/api/v2/login/google":
    post:
      summary: Sign in with google
      tags:
      - Auhorization
      parameters: []
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
                    required:
                    - token
                    - refresh_token
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token_type:
                  type: string
                  example: Bearer
                  description: The token type
                access_token:
                  type: string
                  example: a0ARrdaM-Crs7nqXUlY28zazZymcY9Bj2b6HD
                  description: The access token
              required:
              - token_type
              - access_token
  "/api/v2/logout":
    delete:
      summary: Logout
      tags:
      - Auhorization
      security:
      - Authorization: []
      responses:
        '204':
          description: Logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v2/me":
    get:
      summary: Get my profile
      tags:
      - Auhorization
      security:
      - Authorization: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
                required:
                - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    put:
      summary: Update my profile
      tags:
      - Auhorization
      security:
      - Authorization: []
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
                required:
                - data
        '422':
          description: Unprocessable request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                me[name]:
                  type: string
                  description: Within 50 characters
                me[email]:
                  type: string
                me[password]:
                  type: string
                  description: At least 8 characters
                me[avatar]:
                  type: string
                  format: binary
  "/api/v2/refresh_tokens":
    post:
      summary: Refresh Access Token
      tags:
      - Auhorization
      parameters: []
      responses:
        '200':
          description: Token has been reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      refresh_token:
                        type: string
                    required:
                    - token
                    - refresh_token
                required:
                - data
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: sometoken628396
                  description: The refresh token
  "/api/v2/reset_password":
    post:
      summary: Forgot password
      tags:
      - Reset password
      parameters: []
      responses:
        '201':
          description: Request reset password successfully
        '404':
          description: Email does not exist
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                  description: The user email address
                reset_password_url:
                  type: string
                  example: http://your-domain.com/reset_password
                  description: 'The reset password url from your website, provide
                    this url to get a correct reset password link in the email. A
                    query named `token` will be added to the url, which will be used
                    to identify the user.<br/>For example: If your front-end app is
                    running under localhost:3000, the reset_password_url value should
                    be `http://localhost:3000/reset_password`, then the url in the
                    email will be: `http://localhost:3000/reset_password?token=abc123`'
              required:
              - email
    get:
      summary: Verify a reset password token
      tags:
      - Reset password
      parameters:
      - name: token
        in: query
        required: true
        description: The reset password token from the URL in the email
        schema:
          type: string
      responses:
        '200':
          description: The token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: string
                        required:
                        - email
                        - name
                    required:
                    - user
                required:
                - data
        '400':
          description: The token has expired or invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: The token has already been used
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    put:
      summary: Reset password
      tags:
      - Reset password
      parameters: []
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: The token has expired or invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '404':
          description: The token has already been used
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: New password
                token:
                  type: string
                  description: The reset password token
              required:
              - password
              - token
  "/api/v2/users":
    post:
      summary: Register
      tags:
      - Auhorization
      parameters: []
      responses:
        '201':
          description: Register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
                required:
                - data
        '422':
          description: Register failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user[name]:
                  type: string
                  description: Within 50 characters
                user[email]:
                  type: string
                user[password]:
                  type: string
                  description: At least 8 characters
                user[avatar]:
                  type: string
                  format: binary
              required:
              - user[name]
              - user[email]
              - user[password]
servers:
- url: "{heroku}"
  variables:
    heroku:
      default: https://mock-api.nals.vn
- url: "{localhost}"
  variables:
    localhost:
      default: http://localhost:3000
components:
  securitySchemes:
    Authorization:
      description: 'JWT token for authorization. Example: `Bearer my-jwt-token`'
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Blog:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: My Blog
          description: Title of the blog
        content:
          type: string
          example: My Blog Content
          description: Content of the blog
        image:
          type: object
          properties:
            url:
              type: string
              example: http://localhost:3000/images/fallback/default.png
              description: Image of the blog
          required:
          - url
        created_at:
          type: string
          example: '2019-01-01T00:00:00.000Z'
          description: Created at of the blog
        updated_at:
          type: string
          example: '2019-01-01T00:00:00.000Z'
          description: Updated at of the blog
      required:
      - id
      - title
      - content
      - image
      - created_at
      - updated_at
    Comment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
          example: This is an awesome blog
          description: Maximun length is 5000 characters
        blog_id:
          type: integer
        created_at:
          type: string
          example: '2019-01-01T00:00:00.000Z'
          description: Created at of the comment
        updated_at:
          type: string
          example: '2019-01-01T00:00:00.000Z'
          description: Updated at of the comment
        deleted_at:
          type: string
          nullable: true
          example: '2019-01-01T00:00:00.000Z'
          description: Deleted at of the comment
        user:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
              example: John Doe
              description: Name of the user
            email:
              type: string
              example: ''
              description: Email of the user
            avatar:
              type: object
              properties:
                url:
                  type: string
              required:
              - url
          required:
          - id
          - name
          - email
          - avatar
      required:
      - id
      - content
      - blog_id
      - created_at
      - updated_at
      - deleted_at
    User:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        avatar:
          type: object
          properties:
            url:
              type: string
          required:
          - url
        created_at:
          type: string
        updated_at:
          type: string
      required:
      - email
      - name
      - avatar
      - created_at
      - updated_at
    Pagination:
      type: object
      properties:
        count:
          type: number
          description: Total number of items
        page:
          type: number
          description: Current page
        offset:
          type: number
          description: Items per page
        total:
          type: number
          description: Total number of pages
        prev:
          type: number
          description: Previous page
        next:
          type: number
          description: Next page
      required:
      - count
      - page
      - offset
      - total
      - prev
      - next
    Error:
      type: object
      properties:
        message:
          type: string
        type:
          type: string
        status:
          type: string
        path:
          type: string
        error_code:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              code:
                type: string
              message:
                type: string
            required:
            - field
            - code
            - message
      required:
      - message
      - type
      - status
      - path
      - error_code
      - errors
